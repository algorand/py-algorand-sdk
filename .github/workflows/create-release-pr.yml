name: Create Release PR

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: 'The release_version used for the release branch name, e.g. release/vx.x.x'
        default: 'vx.x.x'
        required: true
        type: string
      pre_release_version:
        description: "Pre-Release version, e.g. 'b1', will be added behind the release_version in setup.py."
        required: false
        type: string

env:
  RELEASE_VERSION: ${{ inputs.release_version }}
  PRE_RELEASE_VERSION: ${{ inputs.pre_release_version }}
  RELEASE_BRANCH: release/${{ inputs.release_version }}

jobs:
  create-release-pr:
    runs-on: ubuntu-latest

    steps:
      - name: Set Release Version and Branch to Check Out
        id: set-release
        run: |
          if [[ $RELEASE_VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            if [[ $PRE_RELEASE_VERSION =~ ^[a-z.0-9]+$ ]]; then
              echo "release-tag: $RELEASE_VERSION$PRE_RELEASE_VERSION"
              echo "release-tag=$RELEASE_VERSION$PRE_RELEASE_VERSION" >> $GITHUB_OUTPUT
            elif [[ -n $PRE_RELEASE_VERSION ]]; then
              echo "Input pre_release_version is not empty, but does not match the regex pattern ^[a-z.0-9]+$"
              exit 1
            else
              echo "release-tag: $RELEASE_VERSION"
              echo "release-tag=$RELEASE_VERSION" >> $GITHUB_OUTPUT
            fi
          else
            echo "Version input doesn't match the regex pattern ^v[0-9]+\.[0-9]+\.[0-9]+$"
            exit 1
          fi

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create Release Branch if it does not exist
        run: |
          if ! git show-ref --verify --quiet "refs/remotes/origin/$RELEASE_BRANCH"; then
            git checkout -b $RELEASE_BRANCH
            git push --set-upstream origin $RELEASE_BRANCH
          elif [[ $(git rev-parse --abbrev-ref HEAD) != "$RELEASE_BRANCH" ]]; then
            echo "Current Branch: $(git rev-parse --abbrev-ref HEAD)"
            echo "Release branch exists, make sure you're using the workflow from the release branch or delete the existing release branch."
            exit 1
          else
            echo "Release branch exists and used as workflow ref."
          fi

      - name: Get Latest Release
        id: get-release
        run: |
          if [[ -n $PRE_RELEASE_VERSION ]]; then
            echo "Get the latest release"
            tag=$(curl -L \
                        --header "Accept: application/vnd.github.v3+json" \
                        "https://api.github.com/repos/${{ github.repository }}/releases" | jq -r '.[0].tag_name')
            echo "latest-tag=$tag" >> $GITHUB_OUTPUT
          else
            echo "Get the latest stable release"
            tag=$(curl -L \
                        --header "Accept: application/vnd.github.v3+json" \
                        "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r '.tag_name')
            echo "latest-tag=$tag" >> $GITHUB_OUTPUT
          fi

      - name: Build Changelog
        uses: mikepenz/release-changelog-builder-action@v3.7.2
        id: build-changelog
        env:
          PREVIOUS_VERSION: ${{ steps.get-release.outputs.latest-tag }}
        with:
          fromTag: ${{ env.PREVIOUS_VERSION }}
          toTag: ${{ env.RELEASE_BRANCH }}
          failOnError: true
          configurationJson: |
            {
                "categories": [
                    {
                        "title": "## New Features",
                        "labels": [
                            "New Feature"
                        ]
                    },
                    {
                        "title": "## Enhancement",
                        "labels": [
                            "Enhancement"
                        ]
                    },
                    {
                        "title": "## Bug Fixes",
                        "labels": [
                            "Bug-Fix"
                        ]
                    },
                    {
                        "title": "## Not Yet Enabled",
                        "labels": [
                            "Not-Yet-Enabled"
                        ]
                    }
                ],
                "ignore_labels": [
                    "Skip-Release-Notes"
                ],
                "sort": {
                    "order": "ASC",
                    "on_property": "mergedAt"
                },
                "template": "#{{CHANGELOG}}",
                "pr_template": "- #{{TITLE}} by #{{AUTHOR}} in ##{{NUMBER}}"
            }

      - name: Update Changelog
        if: ${{ env.PRE_RELEASE_VERSION == '' }}
        env:
          CHANGELOG_CONTENT: ${{ steps.build-changelog.outputs.changelog }}
          PREVIOUS_VERSION: ${{ steps.get-release.outputs.latest-tag }}
        run: |

          echo "$(tail -n +2 CHANGELOG.md)" > CHANGELOG.md
          echo -e "# Changelog\n\n# ${RELEASE_VERSION}\n\n${CHANGELOG_CONTENT}**Full Changelog**: https://github.com/algorand/py-algorand-sdk/compare/${PREVIOUS_VERSION}...${RELEASE_VERSION}" | cat - CHANGELOG.md > temp && mv temp CHANGELOG.md

      - name: Update version in setup.py
        env:
          RELEASE_TAG: ${{ steps.set-release.outputs.release-tag }}
        run: |
          python3 scripts/bump_version.py ${RELEASE_TAG:1}

      - name: Commit Changes
        uses: EndBug/add-and-commit@v9.1.3
        env:
          RELEASE_TAG: ${{ steps.set-release.outputs.release-tag }}
        with:
          message: "bump up version to ${{ env.RELEASE_TAG }}"

      - name: Create Pull Request to Master
        env:
          CHANGELOG_CONTENT: ${{ steps.build-changelog.outputs.changelog }}
          PREVIOUS_VERSION: ${{ steps.get-release.outputs.latest-tag }}
          GH_TOKEN: ${{ github.token }}
          RELEASE_TAG: ${{ steps.set-release.outputs.release-tag }}
        run: |
          echo -e "# ${RELEASE_TAG}\n\n${CHANGELOG_CONTENT}**Full Changelog**: https://github.com/algorand/py-algorand-sdk/compare/${PREVIOUS_VERSION}...${RELEASE_TAG}" > msg_body.txt
          export msg_body=$(cat msg_body.txt)
          gh pr create --base "master" \
            --title "FOR REVIEW ONLY: py-algorand-sdk $RELEASE_TAG" \
            --label "Skip-Release-Notes" \
            --body "$msg_body" \
            --reviewer algorand/scytale \
            --reviewer algorand/devops
          echo "Pull request to Master created"

      - name: Create Pull Request to Develop
        if: ${{ env.PRE_RELEASE_VERSION == '' }}
        env:
          GH_TOKEN: ${{ github.token }}
          RELEASE_TAG: ${{ steps.set-release.outputs.release-tag }}
        run: |
          gh pr create --base "develop" \
            --title "FOR REVIEW ONLY: Merge back py-algorand-sdk $RELEASE_TAG to develop" \
            --label "Skip-Release-Notes" \
            --body "Merge back version changes to develop." \
            --reviewer algorand/scytale \
            --reviewer algorand/devops
          echo "Pull request to Develop created"
